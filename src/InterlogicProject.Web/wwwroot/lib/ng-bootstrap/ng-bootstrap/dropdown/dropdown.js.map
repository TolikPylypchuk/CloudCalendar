{"version":3,"sources":["../../src/dropdown/dropdown.ts"],"names":[],"mappings":"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","file":"dropdown.js","sourceRoot":"","sourcesContent":["import {\n  forwardRef,\n  Inject,\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  ContentChild,\n  OnChanges,\n  SimpleChanges\n} from '@angular/core';\nimport {NgbDropdownConfig} from './dropdown-config';\n\n/**\n */\n\nexport class NgbDropdownMenu {\n  isOpen = false;\n\n  constructor( public dropdown, private _elementRef: ElementRef) {}\n\n  isEventFrom($event) { return this._elementRef.nativeElement.contains($event.target); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngbDropdownMenu]', host: {'[class.dropdown-menu]': 'true', '[class.show]': 'dropdown.isOpen()'}}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [forwardRef(() => NgbDropdown), ] }, ]},\n{type: ElementRef, },\n];\n}\n\n/**\n * Allows the dropdown to be toggled via click. This directive is optional.\n */\n\nexport class NgbDropdownToggle {\n  constructor( public dropdown, private _elementRef: ElementRef) {}\n\n  toggleOpen() { this.dropdown.toggle(); }\n\n  isEventFrom($event) { return this._elementRef.nativeElement.contains($event.target); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[ngbDropdownToggle]',\n  host: {\n    'class': 'dropdown-toggle',\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'dropdown.isOpen()',\n    '(click)': 'toggleOpen()'\n  }\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [forwardRef(() => NgbDropdown), ] }, ]},\n{type: ElementRef, },\n];\n}\n\n/**\n * Transforms a node into a dropdown.\n */\n\nexport class NgbDropdown {\n   private _menu: NgbDropdownMenu;\n\n   private _toggle: NgbDropdownToggle;\n\n  /**\n   * Indicates that the dropdown should open upwards\n   */\n   up: boolean;\n\n  /**\n   * Indicates that dropdown should be closed when selecting one of dropdown items (click) or pressing ESC.\n   * When it is true (default) dropdowns are automatically closed on both outside and inside (menu) clicks.\n   * When it is false dropdowns are never automatically closed.\n   * When it is 'outside' dropdowns are automatically closed on outside clicks but not on menu clicks.\n   * When it is 'inside' dropdowns are automatically on menu clicks but not on outside clicks.\n   */\n   autoClose: boolean | 'outside' | 'inside';\n\n  /**\n   *  Defines whether or not the dropdown-menu is open initially.\n   */\n   _open = false;\n\n  /**\n   *  An event fired when the dropdown is opened or closed.\n   *  Event's payload equals whether dropdown is open.\n   */\n   openChange = new EventEmitter();\n\n  constructor(config: NgbDropdownConfig) {\n    this.up = config.up;\n    this.autoClose = config.autoClose;\n  }\n\n  /**\n   * Checks if the dropdown menu is open or not.\n   */\n  isOpen(): boolean { return this._open; }\n\n  /**\n   * Opens the dropdown menu of a given navbar or tabbed navigation.\n   */\n  open(): void {\n    if (!this._open) {\n      this._open = true;\n      this.openChange.emit(true);\n    }\n  }\n\n  /**\n   * Closes the dropdown menu of a given navbar or tabbed navigation.\n   */\n  close(): void {\n    if (this._open) {\n      this._open = false;\n      this.openChange.emit(false);\n    }\n  }\n\n  /**\n   * Toggles the dropdown menu of a given navbar or tabbed navigation.\n   */\n  toggle(): void {\n    if (this.isOpen()) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  closeFromClick($event) {\n    if (this.autoClose && $event.button !== 2 && !this._isEventFromToggle($event)) {\n      if (this.autoClose === true) {\n        this.close();\n      } else if (this.autoClose === 'inside' && this._isEventFromMenu($event)) {\n        this.close();\n      } else if (this.autoClose === 'outside' && !this._isEventFromMenu($event)) {\n        this.close();\n      }\n    }\n  }\n\n  closeFromOutsideEsc() {\n    if (this.autoClose) {\n      this.close();\n    }\n  }\n\n  private _isEventFromToggle($event) { return this._toggle ? this._toggle.isEventFrom($event) : false; }\n\n  private _isEventFromMenu($event) { return this._menu ? this._menu.isEventFrom($event) : false; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[ngbDropdown]',\n  exportAs: 'ngbDropdown',\n  host: {\n    '[class.dropdown]': '!up',\n    '[class.dropup]': 'up',\n    '[class.show]': 'isOpen()',\n    '(keyup.esc)': 'closeFromOutsideEsc()',\n    '(document:click)': 'closeFromClick($event)'\n  }\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgbDropdownConfig, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_menu': [{ type: ContentChild, args: [NgbDropdownMenu, ] },],\n'_toggle': [{ type: ContentChild, args: [NgbDropdownToggle, ] },],\n'up': [{ type: Input },],\n'autoClose': [{ type: Input },],\n'_open': [{ type: Input, args: ['open', ] },],\n'openChange': [{ type: Output },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}